name: Build and Deploy eShopWebApp to Azure

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Log in to Azure Container Registry
      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      # 3. Build Docker image
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/eshopwebapp:latest ./src/WebApp

      # 4. Push Docker image to ACR
      - name: Push Docker image
        run: |
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/eshopwebapp:latest

      # 5. Deploy the Docker image to Azure Web App
      - name: Deploy to Azure Web App
        run: |
          az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
          az webapp config container set \
            --name ${{ secrets.WEB_APP_NAME }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --docker-custom-image-name ${{ secrets.ACR_LOGIN_SERVER }}/eshopwebapp:latest \
            --docker-registry-server-url https://${{ secrets.ACR_LOGIN_SERVER }} \
            --docker-registry-server-user ${{ secrets.ACR_USERNAME }} \
            --docker-registry-server-password ${{ secrets.ACR_PASSWORD }}

      # 6. Optional: Restart the Web App to ensure the new image is running
      - name: Restart Web App
        run: |
          az webapp restart --name ${{ secrets.WEB_APP_NAME }} --resource-group ${{ secrets.RESOURCE_GROUP }}
